pipeline TemperaturesPipeline {

    DataExtractor
        ->ZipArchiveInterpreter
        ->CSVFilePicker
        ->TempFileInterpreter
        ->TempCSVInterpreter
        // ->TempColumnDeleter
        ->NameHeaderWriterA1E1
        ->NameHeaderWriterJ1
        ->TempTableInterpreter
        ->CelsiusToFahrenheitTransformerTemp
        ->CelsiusToFahrenheitTransformerBatTemp
        ->DatabaseLoader;

    // Data Extraction - HttpExtractor
    block DataExtractor oftype HttpExtractor { url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip"; }    
    block ZipArchiveInterpreter oftype ArchiveInterpreter {archiveType: "zip";}
    block CSVFilePicker oftype FilePicker {path: "./data.csv";}
    block TempFileInterpreter oftype TextFileInterpreter {}
    block TempCSVInterpreter oftype CSVInterpreter {delimiter: ";";}
    
    // block TempColumnDeleter oftype ColumnDeleter {
    //     delete: [
    //         column F, column G, column H, column I
    //     ];
    // }

    block NameHeaderWriterA1E1 oftype CellWriter {
        at: range A1:E1;
        write: [
            "id",
            "producer",
            "model",
            "month",
            "temperature"
        ];
    }

    block NameHeaderWriterJ1 oftype CellWriter {
        at: cell J1;
        write: [
            "battery_temperature"
        ];
    }

    constraint GeraetRange oftype RangeConstraint {
        // regex: /^Vogelsang.*$/;
        lowerBound:1;
        lowerBoundInclusive: true;
    }

    valuetype Geraet oftype integer {
        constraints: [
            GeraetRange,
        ];
    }

    constraint MonthRange oftype RangeConstraint {
        // regex: /^Vogelsang.*$/;
        lowerBound:1;
        lowerBoundInclusive: true;

        upperBound:12;
        upperBoundInclusive: true;
    }

    valuetype Month oftype integer {
        constraints: [
            MonthRange,
        ];
    }

    block TempTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype Geraet,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype Month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    transform CelsiusToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahrenheit oftype decimal;
        tempFahrenheit: (tempCelsius * (9/5)) + 32;
    }

    block CelsiusToFahrenheitTransformerTemp oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: CelsiusToFahrenheit;
    }

    block CelsiusToFahrenheitTransformerBatTemp oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: CelsiusToFahrenheit;
    }


    block DatabaseLoader oftype SQLiteLoader {
        table: "temperatures"; 
        file: "./temperatures.sqlite";
    }
}


